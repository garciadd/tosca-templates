tosca_definitions_version: 'tosca_simple_yaml_1_0'
imports:
- indigo_custom_types: 'https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0.1/custom_types.yaml'

description: >
    Classification of biomedical images (of the retina) into five disease categories or stages (from healthy to severe) using a deep learning approach. This is a TensorFlow example implementation.
     More info at https://marketplace.deep-hybrid-datacloud.eu/modules/deep-oc-retinopathy.html
metadata:
  display_name: Retinopathy module
  icon: https://github.com/indigo-dc/tosca-templates/raw/stable/v4.0.1/deep-oc/images/retinopathy_module.png
  tag: GPU

topology_template:
  inputs:

    docker_image:
      type: string
      description: Application Docker image 
      required: yes
      default: 'itokeiic/deep-oc-retinopathy_test'

    num_gpus:
      type: integer
      description: Number of required GPUs
      required: no
      default: 1

    rclone_conf:
      type: string
      description: nextcloud link to access via webdav
      required: no
      default: '/srv/.rclone/rclone.conf'

    rclone_url:
      type: string
      description: nextcloud link to access via webdav
      required: no
      default: 'https://nc.deep-hybrid-datacloud.eu/remote.php/webdav/'

    rclone_vendor:
      type: string
      description: rclone vendor
      required: no
      default: 'nextcloud'
  
    rclone_user:
      type: string
      description: rclone user to access nextcloud
      required: no
      default: ''

    rclone_password:
      type: string
      description: rclone user password
      required: no
      default: ''

  node_templates:
    Docker:
      type: 'tosca.nodes.indigo.Container.Runtime.Docker'
      capabilities:
        host:
          properties:
            publish_all: false
            publish_ports:
            - protocol: 'tcp'
              source: 5000
            - protocol: 'tcp'
              source: 6006
            mem_size: '4096 MB'
            num_cpus: 1
            num_gpus: { get_input: num_gpus }
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    marathon:
      type: 'tosca.nodes.indigo.Container.Application.Docker.Marathon'
      properties:
        force_pull_image: true
        command: 'deepaas-run --listen-ip 0.0.0.0 --listen-port=$PORT0'
        environment_variables:
          RCLONE_CONFIG: { get_input: rclone_conf }
          RCLONE_CONFIG_RSHARE_TYPE: webdav
          RCLONE_CONFIG_RSHARE_URL: { get_input: rclone_url }
          RCLONE_CONFIG_RSHARE_VENDOR: { get_input: rclone_vendor }
          RCLONE_CONFIG_RSHARE_USER: { get_input: rclone_user }
          RCLONE_CONFIG_RSHARE_PASS: { get_input: rclone_password }
      requirements:
      - host:
          node: 'Docker'
          capability: 'tosca.capabilities.indigo.Container.Docker'
          relationship: 'tosca.relationships.HostedOn'
      artifacts:
        image:
          file: { get_input: docker_image }
          type: 'tosca.artifacts.Deployment.Image.Container.Docker'
  outputs:
    endpoint:
      value:  { concat: [ "http://", { get_attribute : [ marathon, load_balancer_ips, 0 ] }, ':', { get_attribute : [ Docker, host, publish_ports, 0, target ] } ] }


tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0.1/custom_types.yaml

description: TOSCA examples for specifying a Chronos Job that runs an application using Onedata storage.

topology_template:
  inputs:

    onedata_provider:
      type: string
      description: Onedata provider to be used to mount the space. 
      required: yes
    
    onedata_zone:
      type: string
      description: Onezone URL
      required: yes

    model_space_name:
      type: string
      description: Onedata space where the model is stored
      required: yes
    
    model_path:
      type: string
      description: Path to the model inside the Onedata space
      required: yes
    
    output_filenames:
      type: string
      description: csv list of filenames generated by the application run
      default: ''
      required: yes

    input_config_file:
      type: string
      description: Input file to edit
      required: yes

    cpus:
      type: float
      description: Amount of CPUs for this job
      required: yes
    
    mem:
      type: scalar-unit.size
      description: Amount of Memory for this job
      required: yes 
 
  node_templates:
 
   
    chronos_job1:
      type: tosca.nodes.indigo.Container.Application.Docker.Chronos
      properties:
        description: 'Execute Application'
        command: 'cd $MESOS_SANDBOX && wget https://raw.githubusercontent.com/ferag/xdc_tmp/master/run_model.sh && /bin/bash run_model.sh'
        uris: []
        retries: 3
        environment_variables:
          INPUT_ONEDATA_TOKEN: { get_attribute : [ input_onedata_space, token ] }
          INPUT_CONFIG_FILE: { get_input: input_config_file }
          D3D_BIN: '/delft3d_repository'
          ONEDATA_PROVIDERS: { get_input : onedata_provider }
          ONEDATA_SPACE: { get_input: model_space_name }
          MODEL_PATH: { get_input: model_path }
          OUTPUT_FILENAMES: { get_input: output_filenames }
      artifacts:
        image:
          file: 'ferag/barridocker' 
          type: tosca.artifacts.Deployment.Image.Container.Docker
      requirements:
        - host: docker_runtime
   
   
    docker_runtime:
      type: tosca.nodes.indigo.Container.Runtime.Docker
      capabilities:
        host:
          properties:
            num_cpus: { get_input: cpus }
            mem_size: { get_input: mem }
            volumes: [ '/data:rw' ]


    input_onedata_space:
      type: tosca.nodes.indigo.OnedataSpace
      properties:
        onezone: { get_input: onedata_zone }
        space: { get_input: model_space_name }
        

    output_onedata_space:
      type: tosca.nodes.indigo.OnedataSpace
      properties:
        onezone: { get_input: onedata_zone }
        space: { get_input: model_space_name }

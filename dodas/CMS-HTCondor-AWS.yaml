tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0.1/custom_types.yaml

description: TOSCA template for a complete CMS Site over Mesos orchestrator running on AWS. Below TOSCA example for OS and host propertes definition on AWS. Also policy setting for availability zone choice is shown below

topology_template:

  inputs:

#  Marathon and Mesos related configuration parameters
    marathon_username:
      type: string
      default: "admin"

    marathon_password:
      type: string
      default: "changeme"

    mesos_username:
      type: string
      default: "admin"

    mesos_password:
      type: string
      default: "changeme"

    number_of_masters:
      type: integer
      default: 1

    num_cpus_master:
      type: integer
      default: 4

    mem_size_master:
      type: string
      default: "8 GB"

    number_of_slaves:
      type: integer
      default: 1

    num_cpus_slave:
      type: integer
      default: 16

    mem_size_slave:
      type: string
      default: "32 GB"

    number_of_lbs:
      type: integer
      default: 1

    num_cpus_lb:
      type: integer
      default: 4

    mem_size_lb:
      type: string
      default: "8 GB"

    server_image:
      type: string
      default: "aws://eu-west-1/ami-0773391ae604c49a4"
      #AMI ID of on-demand 16.04 image: aws://eu-west-1/ami-0773391ae604c49a4

####
# IAM related configurations to enable the OIDC to X.509 certificate translation
    iam_token:
      type: string
      default: "DODAS-IAM.Token"

    iam_client_id:
      type: string
      default: "IAM-Client-ID"

    iam_client_secret:
      type: string
      default: "IAM-Client-Secret"

# CMS specific configurations 
    cms_local_site:
      type: string
      default: "T3_UK_Opportunistic_dodas"

    cms_stageoutsite:
      type: string
      default: "T2_UK_London_IC"

    cms_stageoutprotocol:
      type: string
      default: "srmv2"

    cms_stageoutcommand:
      type: string
      default: "gfal2"

    cms_phedexnode:
      type: string
      default: "T2_UK_London_IC"

    cms_xrd_readserver:
      type: string
      default: "xrootd.ba.infn.it"

# DODAS-Monitoring specific params (NOTE this is optional)
    monitordb_ip:
      type: string 
      default: "ES-Endpoint"
 
    elasticsearch_secret:
      type: string
      default: "ES-secret"
 
  node_templates:

    mesos_master:
      type: tosca.nodes.indigo.MesosMaster
      properties:
        mesos_username: { get_input: mesos_username }
        mesos_password: { get_input: mesos_password }
        marathon_username: { get_input: marathon_username }
        marathon_password: { get_input: marathon_password }
        mesos_masters_list: { get_attribute: [ mesos-master-server, private_address ] }
      requirements:
        - host: mesos-master-server

    cms_services:
      type: tosca.nodes.indigo.CmsServices
      properties:
        marathon_password: { get_input: marathon_password }
        marathon_username: { get_input: marathon_username }
        mysquid_host: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        proxycache_host: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        iam_access_token: { get_input: iam_token }
        iam_client_id: { get_input: iam_client_id }
        iam_client_secret: { get_input: iam_client_secret }
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        cms_local_site: { get_input: cms_local_site }
      requirements:
        - host: mesos_master

    mesos_slave:
      type: tosca.nodes.indigo.MesosSlave
      properties:
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        front_end_ip: { get_attribute: [ mesos-master-server, private_address, 0 ] }
      requirements:
        - host: mesos-slave-server

    cms_wn:
      type: tosca.nodes.indigo.CmsWnConfig
      properties:
        mysquid_host: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        proxycache_host: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        cms_local_site: { get_input: cms_local_site }
        cms_stageoutsite: { get_input: cms_stageoutsite }
        cms_stageoutprotocol: { get_input: cms_stageoutprotocol }
        cms_stageoutcommand: { get_input: cms_stageoutcommand }
        cms_phedexnode: { get_input: cms_phedexnode } 
        cms_xrd_readserver: { get_input: cms_xrd_readserver }
        monitordb_ip: { get_input: monitordb_ip }
        elasticsearch_secret: { get_input: elasticsearch_secret }
      requirements:
        - host: mesos_slave


    mesos_load_balancer:
      type: tosca.nodes.indigo.MesosLoadBalancer
      properties:
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        marathon_username: { get_input: marathon_username }
        marathon_password: { get_input: marathon_password }
      requirements:
        - host: mesos-lb-server
        - dependency: mesos_master

    mesos-master-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: mesosserverpublic
            ports:
              mesos_port:
                protocol: tcp
                source: 5050
              marathon_port:
                protocol: tcp
                source: 8443
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master }
            #preemtible_instance: true   #AWS specific
        os:
          properties:
            image: { get_input: server_image }
            credential:      #AWS specific
              user: ubuntu   #AWS specific
              token: ""      #AWS specific

    mesos-slave-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave }
            preemtible_instance: true
            disk_size: 20 GB
        os:
          properties:
            image: { get_input: server_image }
            credential:
              user: ubuntu
              token: ""


    mesos-lb-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: mesoslb
        scalable:
          properties:
            count: { get_input: number_of_lbs }
        host:
          properties:
            num_cpus: { get_input: num_cpus_lb }
            mem_size: { get_input: mem_size_lb }
            #preemtible_instance: true
        os:
          properties:
            image: { get_input: server_image }
            credential:
              user: ubuntu
              token: ""

# Example of tosca selection for availability zone
  policies:
   - set_availability_zone:
      type: tosca.policies.Placement
      properties: { availability_zone: 'eu-west-1c'}
      targets: [ mesos-slave-server ]

  outputs:
    mesos_lb_ip:
      value: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
    mesos_endpoint:
      value: { concat: [ 'http://', get_attribute: [ mesos-master-server, public_address, 0 ], ':5050' ] }
    marathon_endpoint:
      value: { concat: [ 'https://', get_attribute: [ mesos-master-server, public_address, 0 ], ':8443' ] }

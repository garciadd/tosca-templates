tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0.1/custom_types.yaml


description: TOSCA example for specifying a Mesos Cluster with a containerized HTCondor batch system 

topology_template:

  inputs:

    marathon_username:
      type: string
      default: "admin"

    marathon_password:
      type: string
      default: "passwd"

    number_of_slaves:
      type: integer
      default: 1

    number_of_masters:
      type: integer
      default: 1

    number_of_wn_instances:
      type: integer
      default: 1
  
    cpu_x_wn:
      type: float
      default: 1.0

    ram_x_wn:
      type: float
      default: 4000.0

    docker_cpu_x_wn:
      type: float
      default: 0.95

    docker_ram_x_wn:
      type: float
      default: 3998.95

# Image ID. IaaS depending. 
    server_image: 
      type: string
#      default: "ost://cloud.recas.ba.infn.it/1113d7e8-fc5d-43b9-8d26-61906d89d479" 
      default: "Ubuntu_16.04"

 # IAM condfiguration to enable GSI HTCondor agent authentication
    iam_token:
      type: string
      default: "IAM-valid-Token-Here"

    iam_client_id:
      type: string
      default: "IAM Client ID"

    iam_client_secret:
      type: string
      default: "IAM-Client-Secret"

    proxycache_image:
      type: string
      default: "dodasts/ttscache"

    # Parameters repo
    ams_repo_server_url: 
      type: string
      default: "http://IP-HERE/cvmfs/ams.local.repo"

    ams_repo_public_key_path: 
      type: string
      default: "/etc/cvmfs/keys/ams.local.repo.pub"

    ams_repo_repository_name: 
      type: string
      default: "ams.local.repo"

    ams_repo_public_key_url:
      type: string
      default: "https://gist.githubusercontent.com/spigad/b19fa3a3e32bcc63ce6bc1513a9bc4aa/raw/0dd06039513fa194775adb87ab60891fb55903d4/ams-cvmfs-google"

    ams_repo_public_key: 
      type: string
      default: |
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4ZnSyYfHJSZ4qiKsVW99
        /xcrEZgv2auLLRM4JClsy87nINClaujAONAOK64308ZhJXVMx9z0PywZ6Ngy2TO1
        rjrissJP0LBavxm2SuPKWep9lQczVkOtQsWNN1YoKDF6jMvHCtIOROZuHZniDr0U
        CZCq2j7zni2t0kbBErpry0M+wTtkOIMcTPI6joem8JcRQ8NU915eWCAiwbe5C4Gj
        dOSZdlvqN+zEUWc+ZlgMqNnqyda1QD0msoiCT+DfKn2B0O+EqVjw1IHyHOVEc9QS
        X9rqkIIcnYfK8gPE2eA6BOFF0TMzW7zrcLd2B8LkSIhurhPFRJRz8ZtekOOr21J8
        jwIDAQAB
        -----END PUBLIC KEY-----
    
  node_templates:

    mesos_master:
      type: tosca.nodes.indigo.MesosMaster
      properties:
        marathon_username: { get_input: marathon_username }
        marathon_password: { get_input: marathon_password }
        chronos_password: test_pass
        mesos_masters_list: { get_attribute: [ mesos-master-server, private_address ] }
      requirements:
        - host: mesos-master-server
    
    mesos_slave:
      type: tosca.nodes.indigo.MesosSlave
      properties:
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        front_end_ip: { get_attribute: [ mesos-master-server, private_address, 0 ] }
      requirements:
        - host: mesos-slave-server
    
    mesos_slaveschedd:
      type: tosca.nodes.indigo.MesosSlave
      properties:
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        front_end_ip: { get_attribute: [ mesos-master-server, private_address, 0 ] }
      requirements:
        - host: mesos-slaveschedd-server

    mesos_slaveccb:
      type: tosca.nodes.indigo.MesosSlave
      properties:
        master_ips: { get_attribute: [ mesos-master-server, private_address ] } 
        front_end_ip: { get_attribute: [ mesos-master-server, private_address, 0 ] }
      requirements:
        - host: mesos-ccb-server

    mesos_load_balancer:
      type: tosca.nodes.indigo.MesosLoadBalancer
      properties:
        marathon_username: { get_input: marathon_username }
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        marathon_password: { get_input: marathon_password }        
      requirements:
        - host: mesos-lb-server
        - dependency: mesos_master

    ams_services:
      type: tosca.nodes.indigo.AmsCondorMasterConfig
      properties:
        marathon_username: { get_input: marathon_username }
        marathon_password: { get_input: marathon_password }
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        ams_default_squid: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        htcondor_config_ccb_ip: { get_attribute: [ mesos-ccb-server, private_address, 0 ] }
        htcondor_config_schedd_ip: { get_attribute: [ mesos-slaveschedd-server, private_address, 0 ] }
      requirements:
        - host: mesos_master

    ams_executor:
      type: tosca.nodes.indigo.AmsCondorExecuteConfig
      properties:
        marathon_username: { get_input: marathon_username }
        marathon_password: { get_input: marathon_password }
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        htcondor_config_schedd_ip: { get_attribute: [ mesos-slaveschedd-server, private_address, 0 ] }
        htcondor_config_ccb_ip: { get_attribute: [ mesos-ccb-server, private_address, 0 ] }
        proxycache_host: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        htcondor_config_condor_host: { get_attribute: [ mesos-ccb-server, private_address, 0 ]}
        htcondor_config_ccb_address: { get_attribute: [ mesos-ccb-server, public_address, 0 ]}
        htcondor_config_condor_image: "dodasts/ams"
      requirements:
        - host: mesos_master
        - dependency: htcondor_services

    htcondor_services:
      type: tosca.nodes.indigo.HTCondorServices
      properties:        
        marathon_username: { get_input: marathon_username }
        marathon_password: { get_input: marathon_password }
        htcondor_config_condor_host: { get_attribute: [ mesos-ccb-server, private_address, 0 ]} 
        htcondor_config_ccb_address: { get_attribute: [ mesos-ccb-server, public_address, 0 ]}
        htcondor_config_high_port: "32048"
        htcondor_config_low_port: "31024"
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        lb_ips: { get_attribute: [ mesos-lb-server, private_address ] }
        htcondor_config_schedd_ip_pub: { get_attribute: [ mesos-slaveschedd-server, public_address, 0 ] }
        htcondor_config_schedd_ip: { get_attribute: [ mesos-slaveschedd-server, private_address, 0 ] }
        htcondor_config_ccb_ip_pub: { get_attribute: [ mesos-ccb-server, public_address, 0 ] }
        htcondor_config_ccb_ip: { get_attribute: [ mesos-ccb-server, private_address, 0 ] }
        config_mode: "master"
        htcondor_config_condor_image: "dodasts/ams"
        proxycache_host: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        iam_access_token: { get_input: iam_token }
        iam_client_id: { get_input: iam_client_id }
        iam_client_secret: { get_input: iam_client_secret }
        proxycache_image: { get_input: proxycache_image }
      requirements:
        - host: mesos_master

    condor_wn:
      type: tosca.nodes.indigo.AmsCondorWnConfig
      properties:
        marathon_username: { get_input: marathon_username }
        marathon_password: { get_input: marathon_password }
        master_ips: { get_attribute: [ mesos-master-server, private_address ] }
        number_of_wn_instances: { get_input: number_of_wn_instances }
        number_of_slaves: { get_input: number_of_slaves }
        cpu_x_wn: { get_input: cpu_x_wn }
        ram_x_wn: { get_input: ram_x_wn }
        docker_cpu_x_wn: { get_input: docker_cpu_x_wn }
        docker_ram_x_wn: { get_input: docker_ram_x_wn }
        ams_default_squid: { get_attribute: [ mesos-lb-server, private_address, 0 ] }
        ams_repo_server_url: { get_input: ams_repo_server_url }
        ams_repo_public_key_path: { get_input: ams_repo_public_key_path }
        ams_repo_repository_name: { get_input: ams_repo_repository_name }
        ams_repo_public_key_url: { get_input: ams_repo_public_key_url }
        ams_repo_public_key: { get_input: ams_repo_public_key }
      requirements:
        - host: mesos_slave

    ##
    # Resource section
    # Numer of instances and image parameters
    mesos-master-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: mesosserverpublic
            ports:
              mesos_port:
                protocol: tcp
                source: 5050
              marathon_port:
                protocol: tcp
                source: 8443
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 4
            mem_size: 8 GB
        os:
          properties:
            image: { get_input: server_image }

    mesos-slave-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 2
            mem_size: 4 GB
        os:
          properties:
            image: { get_input: server_image }

    mesos-slaveschedd-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: scheddpublic
            ports:
              schedd_port:
                protocol: tcp
                source: 9618 
              webui_port:
                protocol: tcp
                source: 48080 
              shared_ports:
                protocol: tcp
                source_range: [ 31024, 32048 ]
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 4
            mem_size: 8 GB
        os:
          properties:
            image: { get_input: server_image }
      requirements:
       # contextually this can only be a relationship type
        - local_storage:
            # capability is provided by Compute Node Type
            node: condor_spool_dir
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /spooldir
                device: hdb

    condor_spool_dir:
      type: tosca.nodes.indigo.BlockStorage
      properties:
        size: 500 GB
        type: pd-ssd  # syntax here is IaaS specific. This is a working exaple for Google Cloud. 

 # Aleternatively this use just std disk (no QoS selection)       
        #   condor_spool_dir:
        #      type: tosca.nodes.BlockStorage
        #      properties:
        #        size: 500 GB

    mesos-ccb-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: ccb
            ports:
              schedd_port:
                protocol: tcp
                source: 9618 
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 8
            mem_size: 16 GB
        os:
          properties:
            image: { get_input: server_image }

    mesos-lb-server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            dns_name: mesoslb
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 2
            mem_size: 4 GB
        os:
          properties:
            image: { get_input: server_image }

  outputs:
    mesos_lb_ip:
      value: { get_attribute: [ mesos-lb-server, private_address ] }
    mesos_endpoint:
      value: { concat: [ 'http://', get_attribute: [ mesos-master-server, public_address, 0 ], ':5050' ] }
    marathon_endpoint:
      value: { concat: [ 'https://', get_attribute: [ mesos-master-server, public_address, 0 ], ':8443' ] }
    ccb_endpoint:
      value: { concat: [ 'condor_status  ', get_attribute: [ mesos-ccb-server, public_address, 0 ], ':9618 -schedd' ] }
    register_endpoint:
      value: { concat: [ 'http://', get_attribute: [ mesos-slaveschedd-server, public_address, 0 ], ':48080/register' ] }
